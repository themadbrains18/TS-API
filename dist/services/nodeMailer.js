"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendOtpEmail = sendOtpEmail;
exports.sendTemplateEmail = sendTemplateEmail;
const nodemailer_1 = __importDefault(require("nodemailer"));
const fileTemplate_1 = __importDefault(require("../email-template/fileTemplate"));
/*
 * Configures a Nodemailer transporter for sending emails.
 *
 * The transporter is set up to use Gmail as the email service provider, but it can be configured to use other services like SendGrid or Mailgun.
 *
 * @param service - The email service provider (e.g., 'Gmail'). This can be changed to another service provider like SendGrid or Mailgun.
 * @param auth - Contains the authentication details for the email service:
 *    - user: The email address used for sending emails (retrieved from environment variables).
 *    - pass: The email password or an app-specific password (retrieved from environment variables).
 *
 * This configuration allows the transporter to authenticate and send emails via the specified email service.
 */
const transporter = nodemailer_1.default.createTransport({
    service: 'Gmail', // Email service provider (Gmail in this case)
    auth: {
        user: process.env.SMTP_USERNAME, // Your email address from environment variables
        pass: process.env.SMTP_PASSWORD, // Your email password or app-specific password from environment variables
    },
});
/*
 * Function to send an OTP (One-Time Password) email.
 *
 * @param email - The recipient's email address where the OTP will be sent.
 * @param otp - The generated one-time password that will be included in the email body.
 *
 * @returns A promise that resolves when the OTP email has been successfully sent.
 *
 * Process:
 * 1. Creates the email options with the following properties:
 *    - from: The sender email address, retrieved from environment variables.
 *    - to: The recipient email address passed as an argument.
 *    - subject: The subject of the email (in this case, 'Your OTP Code').
 *    - text: The body of the email, which includes the OTP and a note about its validity period (10 minutes).
 * 2. Uses the configured Nodemailer transporter to send the email with the specified options.
 */
async function sendOtpEmail(email, otp) {
    // Setting up mail options, including the recipient email and message body
    const mailOptions = {
        from: process.env.SMTP_USERNAME, // Sender email address
        to: email, // Recipient email address
        subject: 'Your OTP Code', // Email subject
        text: `Your OTP code is: ${otp}. It is valid for 3 minutes.`, // Plain text email content
    };
    // Sending the OTP email
    await transporter.sendMail(mailOptions);
}
/*
 * Function to send an email with a custom HTML template (e.g., for template downloads).
 *
 * @param email - The recipient's email address where the email with the template will be sent.
 * @param url - The URL associated with the template (e.g., a download link).
 * @param templateName - The name of the template being sent.
 * @param name - The recipient's name (optional, can be an empty string).
 *
 * @returns A promise that resolves when the email with the template has been successfully sent.
 *
 * Process:
 * 1. Generates an HTML email template using the provided URL, template name, and recipient's name by calling the FileTemplate function.
 * 2. Creates the email options with the following properties:
 *    - from: The sender email address, retrieved from environment variables.
 *    - to: The recipient email address passed as an argument.
 *    - subject: The subject of the email (in this case, 'Template Download Successful').
 *    - html: The HTML content of the email, generated by the FileTemplate function.
 * 3. Uses the configured Nodemailer transporter to send the email with the specified options.
 */
async function sendTemplateEmail(email, url, templateName, name) {
    // Generate the HTML email template using the provided URL, template name, and recipient's name
    const emailTemplate = (0, fileTemplate_1.default)(name, url, templateName);
    // Setting up mail options, including the recipient email and HTML content
    const mailOptions = {
        from: process.env.SMTP_USERNAME, // Sender email address
        to: email, // Recipient email address
        subject: 'Template Download Successful', // Email subject
        html: emailTemplate.html, // HTML email content (generated by the FileTemplate function)
    };
    // Sending the email with the template
    await transporter.sendMail(mailOptions);
}
