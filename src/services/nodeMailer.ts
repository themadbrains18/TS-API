import nodemailer from 'nodemailer';
import FileTemplate from '../email-template/fileTemplate';

// Configure Nodemailer transporter for sending emails
// The transporter uses Gmail as the email service, but other services can be used (e.g., SendGrid, Mailgun)
const transporter = nodemailer.createTransport({
  service: 'Gmail', // Email service provider (Gmail in this case)
  auth: {
    user: process.env.SMTP_USERNAME, // Your email address from environment variables
    pass: process.env.SMTP_PASSWORD, // Your email password or app-specific password from environment variables
  },
});

// Function to send OTP (One-Time Password) email
export async function sendOtpEmail(email: string, otp: string): Promise<void> {
  // Setting up mail options, including the recipient email and message body
  const mailOptions = {
    from: process.env.SMTP_USERNAME, // Sender email address
    to: email, // Recipient email address
    subject: 'Your OTP Code', // Email subject
    text: `Your OTP code is: ${otp}. It is valid for 10 minutes.`, // Plain text email content
  };

  // Sending the OTP email
  await transporter.sendMail(mailOptions);
}

// Function to send email with a custom HTML template (e.g., for template downloads)
export async function sendTemplateEmail(
  email: string, 
  url: string, 
  templateName: string, 
  name: string | ""
): Promise<void> {
  // Generate the HTML email template using the provided URL, template name, and recipient's name
  const emailTemplate = FileTemplate(name, url, templateName);

  // Setting up mail options, including the recipient email and HTML content
  const mailOptions = {
    from: process.env.SMTP_USERNAME, // Sender email address
    to: email, // Recipient email address
    subject: 'Template Download Successful', // Email subject
    html: emailTemplate.html, // HTML email content (generated by the FileTemplate function)
  };

  // Sending the email with the template
  await transporter.sendMail(mailOptions);
}
