generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      Role       @default(USER)
  token     String?
  templates Template[] @relation("UserTemplates")
}

model Otp {
  id        String   @id @default(cuid())
  code      String
  expiresAt DateTime
  email     String   @unique
}

model Template {
  id                  String               @id @default(cuid())
  title               String
  price               Float                @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              String
  description         String?              @db.Text
  documentationReady  Boolean?
  imageUrl            String?
  industryTypeId      String?
  isPaid              Boolean              @default(false)
  mobileVersion       Boolean?
  seoTags             Json
  softwareTypeId      String?
  subCategoryId       String?
  templateTypeId      String?
  version             String?
  techDetails         Json?
  downloads           Int                  @default(0)
  credits             Credit[]
  previewImages       PreviewImage[]
  previewMobileImages PreviewMobileImage[]
  sliderImages        SliderImage[]
  sourceFiles         SourceFile[]
  industries          IndustryType?        @relation(fields: [industryTypeId], references: [id])
  softwareType        SoftwareType?        @relation(fields: [softwareTypeId], references: [id])
  subCategory         SubCategory?         @relation(fields: [subCategoryId], references: [id])
  templateType        TemplateType?        @relation(fields: [templateTypeId], references: [id])
  user                User                 @relation("UserTemplates", fields: [userId], references: [id])

  @@index([userId], map: "Template_userId_fkey")
  @@index([industryTypeId], map: "Template_industryTypeId_fkey")
  @@index([softwareTypeId], map: "Template_softwareTypeId_fkey")
  @@index([subCategoryId], map: "Template_subCategoryId_fkey")
  @@index([templateTypeId], map: "Template_templateTypeId_fkey")
}

model Credit {
  id            String   @id @default(cuid())
  fonts         Json?
  images        Json?
  icons         Json?
  illustrations Json?
  templateId    String
  template      Template @relation(fields: [templateId], references: [id])

  @@index([templateId], map: "Credit_templateId_fkey")
}

model TechnicalDetail {
  id         String @id @default(cuid())
  techName   String
  templateId String
}

model SourceFile {
  id         String   @id @default(cuid())
  fileUrl    String   @db.Text
  templateId String
  template   Template @relation(fields: [templateId], references: [id])

  @@index([templateId], map: "SourceFile_templateId_fkey")
}

model SliderImage {
  id         String   @id @default(cuid())
  imageUrl   String   @db.Text
  templateId String
  template   Template @relation(fields: [templateId], references: [id])

  @@index([templateId], map: "SliderImage_templateId_fkey")
}

model PreviewImage {
  id         String   @id @default(cuid())
  imageUrl   String   @db.Text
  templateId String
  template   Template @relation(fields: [templateId], references: [id])

  @@index([templateId], map: "PreviewImage_templateId_fkey")
}

model PreviewMobileImage {
  id         String   @id @default(cuid())
  imageUrl   String   @db.Text
  templateId String
  template   Template @relation(fields: [templateId], references: [id])

  @@index([templateId], map: "PreviewMobileImage_templateId_fkey")
}

model TemplateType {
  id            String         @id @default(cuid())
  name          String         @unique
  softwareType  SoftwareType[] @relation("TemplateTypeSoftwareTypes")
  subCategories SubCategory[]  @relation("TemplateTypeSubCategories")
  templates     Template[]
}

model SubCategory {
  id             String        @id @default(cuid())
  name           String        @unique
  templateTypeId String?
  templateType   TemplateType? @relation("TemplateTypeSubCategories", fields: [templateTypeId], references: [id])
  templates      Template[]

  @@index([templateTypeId], map: "SubCategory_templateTypeId_fkey")
}

model SoftwareType {
  id             String        @id @default(cuid())
  name           String        @unique
  templateTypeId String?
  templateType   TemplateType? @relation("TemplateTypeSoftwareTypes", fields: [templateTypeId], references: [id])
  templates      Template[]

  @@index([templateTypeId], map: "SoftwareType_templateTypeId_fkey")
}

model IndustryType {
  id        String     @id @default(cuid())
  name      String     @unique
  templates Template[]
}

enum Role {
  ADMIN
  USER
}
